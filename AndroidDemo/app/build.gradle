apply plugin: 'com.android.application'
apply plugin: 'pluginTest'
buildscript {
    repositories {
        maven {
            url uri('../repo')
        }
    }
    dependencies {
        classpath 'com.zone.plugin:pluginlibrary:1.0.0'
    }
}

println('配置阶段开始')
android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.zone.gradledemo"
        minSdkVersion 29
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    android.applicationVariants.all { variant ->
        if (variant.buildType.name.equals('release')) {
            variant.outputs.all { output ->
                def buildName = "Downloader"
                def type = variant.buildType.name
                def releaseApkName = buildName + '_' + type + "_" + versionName +  '.apk'
                outputFileName = releaseApkName
                versionNameOverride = "2223"
            }
        }
    }
    task testAndroid{
        println("122222222222222222222222222222")

        doFirst{
        }
    }
}

def buildDate(){
    def date = new Date();
    return date.format("YYYYmmdd")
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
gradle.taskGraph.beforeTask { task {
    doLast {
        println '动态添加的Action'
    }
}

}

task Test {
    doLast {
        println '原始Action'
    }
}


// 创建一个Task
task testConfig() {
    println 'Task中的配置代码'
    // 定义一个闭包
    def a = {
        println 'Task中的配置代码2'
        println("666666666666666666666666666")

    }
    // 执行闭包
    a()
    doFirst {
        println '这段代码配置阶段不执行'

    }
}

println '我是顺序执行的'